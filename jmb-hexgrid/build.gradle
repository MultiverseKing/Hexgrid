import java.nio.file.Files
import java.nio.file.Paths

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
    }
}

/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'application'

//
description = 'Implementation of Hexgrid-API for jMonkeyBuilder'

ext.artifactId = 'jmb-hexgrid'

mainClassName = "com.ss.editor.DevelopPluginStarter"

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    maven { url "https://dl.bintray.com/javasabr/maven" }
}

configurations {
    pluginDependences
}

// temporary solution

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:23.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    
    compile project(':Hexgrid-API')
    implementation 'com.github.JavaSaBr:jmonkeybuilder-extension:2.4.1'
    implementation 'com.github.JavaSaBr:jmonkeybuilder:1.7.2'
}

task cleanPluginFolders(type: Delete) {
	println "Clean Plugin Folders: ${buildDir.getParent()}"
    doFirst {

        def projectFolder = Paths.get("$buildDir").getParent()
        def embeddedPluginsFolder = projectFolder.resolve("embedded-plugins")
        def deployPlugin = projectFolder.resolve("deploy-plugin")

        if (Files.exists(embeddedPluginsFolder)) {
            GFileUtils.deleteDirectory(embeddedPluginsFolder.toFile())
        }

        if (Files.exists(deployPlugin)) {
            GFileUtils.deleteDirectory(deployPlugin.toFile())
        }
    }
}

task createPluginFolders(dependsOn: 'cleanPluginFolders') {
    println "Creating Plugin Folders: ${buildDir.getParent()}"
    doFirst {

        def projectFolder = Paths.get("$buildDir").getParent()
        def embeddedPluginsFolder = projectFolder.resolve("embedded-plugins")

        Files.createDirectory(embeddedPluginsFolder)

        def pluginFolder = embeddedPluginsFolder.resolve(String.valueOf(artifactId))

        Files.createDirectory(pluginFolder)

        def configuration = configurations.pluginDependences
        def dependencies = configuration.dependencies

        if (dependencies.isEmpty()) {
            return
        }

        def libsFolder = pluginFolder.resolve("libs")

        Files.createDirectory(libsFolder)
    }
}

task copyPluginDependences(type: Copy, dependsOn: ['install', 'createPluginFolders']) {

    println "Copy Plugin Dependences: ${buildDir.getParent()}"
    
    def configuration = configurations.pluginDependences
    def dependencies = configuration.dependencies

    if (dependencies.isEmpty()) {
        return
    }

    def projectFolder = Paths.get("$buildDir").getParent()
    def embeddedPluginsFolder = projectFolder.resolve("embedded-plugins")
    def pluginFolder = embeddedPluginsFolder.resolve(String.valueOf(artifactId))
    def libsFolder = pluginFolder.resolve("libs")

    into libsFolder.toString()
    from configuration
}

task preparePlugin(type: Copy, dependsOn: 'copyPluginDependences') {

    println "Prepare Plugin: ${buildDir.getParent()}"
    
    def projectFolder = Paths.get("$buildDir").getParent()
    def embeddedPluginsFolder = projectFolder.resolve("embedded-plugins")
    def pluginFolder = embeddedPluginsFolder.resolve(String.valueOf(artifactId))

    from jar
    into pluginFolder.toString()
}

task deployPlugin(type: Zip, dependsOn: 'preparePlugin') {

	println "Prepare Plugin: ${buildDir.getParent()}"
	
    doFirst {

        def projectFolder = Paths.get("$buildDir").getParent()
        def deployPluginFolder = projectFolder.resolve("deploy-plugin")

        if (!Files.exists(deployPluginFolder)) {
            Files.createDirectory(deployPluginFolder)
        }
    }

    def projectFolder = Paths.get("$buildDir").getParent()
    def embeddedPluginsFolder = projectFolder.resolve("embedded-plugins")
    def pluginFolder = embeddedPluginsFolder.resolve(String.valueOf(artifactId))
    def deployPluginFolder = projectFolder.resolve("deploy-plugin")

    from pluginFolder.toString()
    destinationDir = deployPluginFolder.toFile()
}

run.dependsOn {
    preparePlugin
}
